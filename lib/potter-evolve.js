// Generated by CoffeeScript 1.3.3
(function() {
  var Potter, deck, error, fitness, inspect, kernel, log, main, write, _ref, _ref1;

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  Potter = require('potter');

  deck = require('deck');

  fitness = require('./fitness');

  _ref1 = require('./automata'), kernel = _ref1.kernel, write = _ref1.write;

  main = function() {
    var center, mat, model, model2, name, step, x, y, z, _i, _j, _k, _l, _m, _n, _o;
    name = "automata1";
    model = new Potter({
      size: [1e3, 1e3, 1e3]
    });
    center = [200, 200, 200];
    log("step 1: contamination");
    for (x = _i = 0; _i < 2; x = ++_i) {
      for (y = _j = 0; _j < 2; y = ++_j) {
        for (z = _k = 0; _k < 2; z = ++_k) {
          write([x, y, z], [0, 0, 0, 0, 0]);
        }
      }
    }
    log("writing seed");
    write([1, 1, 1], [1, 0, 0, 0, 0]);
    log(" - " + model.count + " cells\n");
    log("step 2: proliferation");
    for (step = _l = 1; _l <= 1; step = ++_l) {
      log("   - timestep " + step + " (" + model.count + " cells)");
      model.map(kernel);
    }
    log(" - " + model.count + " cells\n");
    model2 = new Potter({
      size: [1e3, 1e3, 1e3]
    });
    for (x = _m = 0; _m < 5; x = ++_m) {
      for (y = _n = 0; _n < 5; y = ++_n) {
        for (z = _o = 0; _o < 5; z = ++_o) {
          mat = model2.material({
            values: [Math.round(Math.random()), 0, 0, 0, 0]
          });
          model2.use(mat);
          if (Math.random() > 0.5 && x > 2) {
            model2.dot([x, y, z], true);
          }
        }
      }
    }
    log("comparing models");
    fitness.compare(model, model2);
    log("step 3: remove dead cells");
    model.filter(function(p, state) {
      return state.values[0];
    });
    return log(" - " + model.count + " cells\n");
  };

  exports.cli = main();

}).call(this);
